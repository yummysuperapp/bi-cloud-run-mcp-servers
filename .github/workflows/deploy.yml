name: Deploy dbt MCP Server to Cloud Run

on:
  push:
    branches:
      - main  # Se ejecuta en cada push a la rama principal

jobs:
  deploy:
    runs-on: ubuntu-latest  # Usa un runner de Ubuntu

    steps:
      - name: üì• Clonar el repositorio
        uses: actions/checkout@v4

      - name: üîë Crear archivo de credenciales en el runner
        run: |
          cat <<'EOT' > /tmp/gcloud-key.json
          ${{ secrets.GCR_JSON_KEY }}
          EOT
          chmod 600 /tmp/gcloud-key.json

      - name: üîç Verificar formato del archivo de credenciales
        run: |
          echo "Verificando que el archivo JSON sea v√°lido..."
          if ! python3 -m json.tool /tmp/gcloud-key.json > /dev/null 2>&1; then
            echo "‚ùå Error: El archivo JSON no es v√°lido"
            echo "Primeras l√≠neas del archivo:"
            head -n 5 /tmp/gcloud-key.json
            exit 1
          fi
          echo "‚úÖ Archivo JSON v√°lido"
          
          # Extraer informaci√≥n del service account
          PROJECT_ID=$(python3 -c "import json; print(json.load(open('/tmp/gcloud-key.json'))['project_id'])")
          CLIENT_EMAIL=$(python3 -c "import json; print(json.load(open('/tmp/gcloud-key.json'))['client_email'])")
          echo "üìã Project ID: $PROJECT_ID"
          echo "üìß Service Account: $CLIENT_EMAIL"

      - name: üîê Autenticarse en Google Cloud con la cuenta de servicio
        run: |
          # Extraer project_id del JSON
          PROJECT_ID=$(python3 -c "import json; print(json.load(open('/tmp/gcloud-key.json'))['project_id'])")
          
          # Autenticar sin especificar el email (se lee del JSON autom√°ticamente)
          gcloud auth activate-service-account --key-file=/tmp/gcloud-key.json
          gcloud auth list  # Verifica qu√© cuenta est√° autenticada
          gcloud config set project $PROJECT_ID

      - name: üîß Habilitar Artifact Registry API
        run: |
          PROJECT_ID=$(python3 -c "import json; print(json.load(open('/tmp/gcloud-key.json'))['project_id'])")
          echo "Habilitando Artifact Registry API..."
          gcloud services enable artifactregistry.googleapis.com --project=$PROJECT_ID

      - name: üì¶ Crear repositorio en Artifact Registry (si no existe)
        run: |
          PROJECT_ID=$(python3 -c "import json; print(json.load(open('/tmp/gcloud-key.json'))['project_id'])")
          REGION="us-central1"
          REPO_NAME="cloud-run-source-deploy"
          
          # Verificar si el repositorio existe
          if ! gcloud artifacts repositories describe $REPO_NAME --location=$REGION --project=$PROJECT_ID 2>/dev/null; then
            echo "Creando repositorio de Artifact Registry..."
            gcloud artifacts repositories create $REPO_NAME \
              --repository-format=docker \
              --location=$REGION \
              --description="Docker repository for Cloud Run deployments" \
              --project=$PROJECT_ID
          else
            echo "Repositorio ya existe"
          fi

      - name: üõ†Ô∏è Configurar Docker para autenticaci√≥n con Artifact Registry
        run: |
          PROJECT_ID=$(python3 -c "import json; print(json.load(open('/tmp/gcloud-key.json'))['project_id'])")
          gcloud auth configure-docker us-central1-docker.pkg.dev
          gcloud config set project $PROJECT_ID

      - name: üèóÔ∏è Construir la imagen Docker con GitHub token
        run: |
          PROJECT_ID=$(python3 -c "import json; print(json.load(open('/tmp/gcloud-key.json'))['project_id'])")
          docker build \
            --build-arg GITHUB_TOKEN=${{ secrets.GH_TOKEN }} \
            -t us-central1-docker.pkg.dev/$PROJECT_ID/cloud-run-source-deploy/dbt-mcp-server:${{ github.sha }} \
            -t us-central1-docker.pkg.dev/$PROJECT_ID/cloud-run-source-deploy/dbt-mcp-server:latest \
            .

      - name: üöÄ Subir la imagen a Artifact Registry
        run: |
          PROJECT_ID=$(python3 -c "import json; print(json.load(open('/tmp/gcloud-key.json'))['project_id'])")
          docker push us-central1-docker.pkg.dev/$PROJECT_ID/cloud-run-source-deploy/dbt-mcp-server:${{ github.sha }}
          docker push us-central1-docker.pkg.dev/$PROJECT_ID/cloud-run-source-deploy/dbt-mcp-server:latest

      - name: üåê Desplegar o actualizar Cloud Run Service
        run: |
          PROJECT_ID=$(python3 -c "import json; print(json.load(open('/tmp/gcloud-key.json'))['project_id'])")
          
          gcloud run deploy dbt-mcp-server \
            --image=us-central1-docker.pkg.dev/$PROJECT_ID/cloud-run-source-deploy/dbt-mcp-server:${{ github.sha }} \
            --platform=managed \
            --region=us-central1 \
            --allow-unauthenticated \
            --memory=2Gi \
            --cpu=2 \
            --timeout=3600 \
            --concurrency=10 \
            --max-instances=5 \
            --min-instances=0 \
            --port=8080 \
            --set-env-vars=ENVIRONMENT=production \
            --set-env-vars=DBT_HOST=cloud.getdbt.com \
            --set-env-vars=DBT_PROD_ENV_ID=${{ secrets.DBT_PROD_ENV_ID }} \
            --set-env-vars=DBT_USER_ID=${{ secrets.DBT_USER_ID }} \
            --set-env-vars=DBT_TOKEN=${{ secrets.DBT_TOKEN }} \
            --set-env-vars=DBT_CLI_TIMEOUT=120 \
            --set-env-vars=DBT_PROJECT_DIR=/app/bi-dbt-bigquery-models \
            --set-env-vars=DBT_PATH=/app/bi-dbt-bigquery-models/dbt_env/bin/dbt \
            --set-env-vars=DBT_PROFILES_DIR=/root/.dbt \
            --set-env-vars=DISABLE_DBT_CLI=false

      - name: üìä Mostrar informaci√≥n del servicio desplegado
        run: |
          PROJECT_ID=$(python3 -c "import json; print(json.load(open('/tmp/gcloud-key.json'))['project_id'])")
          
          SERVICE_URL=$(gcloud run services describe dbt-mcp-server --region=us-central1 --format="value(status.url)")
          echo "‚úÖ Deployment completed successfully!"
          echo "üåê Service URL: $SERVICE_URL"
          echo "üìä Console: https://console.cloud.google.com/run/detail/us-central1/dbt-mcp-server/metrics?project=$PROJECT_ID"
          echo ""
          echo "üéØ Para conectar desde Claude Desktop, usa esta URL en tu configuraci√≥n MCP:"
          echo "   $SERVICE_URL/sse"
